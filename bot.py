# dreamcv_bot MVP (aiogram + OpenAI + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
import openai
import json
import os
from datetime import datetime

API_TOKEN = '7118757045:AAEM0f4WjBD4j7Ra18PhzvOtmyQO4Xzq4QQ'
OPENAI_API_KEY = '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'
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

DATA_FILE = 'user_data.json'

def save_user_content(user_id, content_type, content):
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
    else:
        data = {}

    user_id_str = str(user_id)
    if user_id_str not in data:
        data[user_id_str] = []

    data[user_id_str].append({
        "type": content_type,
        "created": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "content": content
    })

    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ"),
    KeyboardButton("üìÑ –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ"),
    KeyboardButton("üéì –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é")
)

class CoverLetterState(StatesGroup):
    waiting_for_job_text = State()
    waiting_for_name = State()
    waiting_for_experience = State()
    waiting_for_skills = State()

class ResumeState(StatesGroup):
    waiting_for_name = State()
    waiting_for_contacts = State()
    waiting_for_goal = State()
    waiting_for_education = State()
    waiting_for_experience = State()
    waiting_for_skills = State()
    waiting_for_extra = State()

@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DreamCV!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ, —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é.\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=main_menu
    )

@dp.message_handler(commands=['history'])
async def show_history(message: types.Message):
    user_id = str(message.from_user.id)
    if not os.path.exists(DATA_FILE):
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return

    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)

    if user_id not in data or not data[user_id]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return

    reply = "üìÇ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
    for i, item in enumerate(data[user_id], start=1):
        reply += f"{i}. [{item['type'].capitalize()} | {item['created']}]\n{item['content'][:200]}...\n\n"

    await message.answer(reply)

@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ")
async def create_resume(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω—ë–º. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await ResumeState.waiting_for_name.set()

@dp.message_handler(state=ResumeState.waiting_for_name)
async def resume_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–µ–ª–µ—Ñ–æ–Ω, email, –≥–æ—Ä–æ–¥):")
    await ResumeState.waiting_for_contacts.set()

@dp.message_handler(state=ResumeState.waiting_for_contacts)
async def resume_contacts(message: types.Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    await message.answer("–¶–µ–ª—å —Ä–µ–∑—é–º–µ: –Ω–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ?")
    await ResumeState.waiting_for_goal.set()

@dp.message_handler(state=ResumeState.waiting_for_goal)
async def resume_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:")
    await ResumeState.waiting_for_education.set()

@dp.message_handler(state=ResumeState.waiting_for_education)
async def resume_education(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
    await ResumeState.waiting_for_experience.set()

@dp.message_handler(state=ResumeState.waiting_for_experience)
async def resume_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:")
    await ResumeState.waiting_for_skills.set()

@dp.message_handler(state=ResumeState.waiting_for_skills)
async def resume_skills(message: types.Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—è–∑—ã–∫–∏, —Ö–æ–±–±–∏ –∏ —Ç.–¥.):")
    await ResumeState.waiting_for_extra.set()

@dp.message_handler(state=ResumeState.waiting_for_extra)
async def resume_extra(message: types.Message, state: FSMContext):
    await state.update_data(extra=message.text)
    data = await state.get_data()
    prompt = f"""
–°–æ—Å—Ç–∞–≤—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º:

–ò–º—è: {data['name']}
–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contacts']}
–¶–µ–ª—å: {data['goal']}
–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data['education']}
–û–ø—ã—Ç: {data['experience']}
–ù–∞–≤—ã–∫–∏: {data['skills']}
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {data['extra']}

–†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏–∑–ª–æ–∂–µ–Ω–∏–µ–º. –ë–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã. –ü–æ–¥ —Ñ–æ—Ä–º–∞—Ç Word –∏–ª–∏ PDF.
"""
    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    resume = response.choices[0].message.content.strip()
    save_user_content(message.from_user.id, "resume", resume)
    await message.answer("–í–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ:\n\n" + resume)
    await state.finish()

@dp.message_handler(lambda message: message.text == "üìÑ –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ")
async def start_cover_letter(message: types.Message):
    await message.answer("–î–ª—è –∫–∞–∫–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω—É–∂–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")
    await CoverLetterState.waiting_for_job_text.set()

@dp.message_handler(state=CoverLetterState.waiting_for_job_text)
async def process_job_text(message: types.Message, state: FSMContext):
    await state.update_data(job_text=message.text)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)")
    await CoverLetterState.waiting_for_name.set()

@dp.message_handler(state=CoverLetterState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö")
    await CoverLetterState.waiting_for_experience.set()

@dp.message_handler(state=CoverLetterState.waiting_for_experience)
async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("–ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —É –≤–∞—Å –µ—Å—Ç—å?")
    await CoverLetterState.waiting_for_skills.set()

@dp.message_handler(state=CoverLetterState.waiting_for_skills)
async def process_skills(message: types.Message, state: FSMContext):
    await state.update_data(skills=message.text)
    data = await state.get_data()
    prompt = f"""
–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.
–°–æ–∑–¥–∞–π –≤–µ–∂–ª–∏–≤–æ–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏:

–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:
{data['job_text']}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ:
–ò–º—è: {data['name']}
–û–ø—ã—Ç: {data['experience']}
–ù–∞–≤—ã–∫–∏: {data['skills']}

–°–¥–µ–ª–∞–π –ø–∏—Å—å–º–æ –∫—Ä–∞—Ç–∫–∏–º (–¥–æ 200 —Å–ª–æ–≤), –±–µ–∑ –≤–æ–¥—ã, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏.
"""
    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    reply = response.choices[0].message.content.strip()
    save_user_content(message.from_user.id, "cover_letter", reply)
    await message.answer("–í–æ—Ç –≤–∞—à–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:\n\n" + reply)
    await state.finish()

@dp.message_handler(lambda message: message.text == "üéì –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é")
async def interview_prep(message: types.Message):
    await message.answer("DreamCV –∑–∞–¥–∞—Å—Ç –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ì–æ—Ç–æ–≤—ã? –û—Ç–ø–∏—à–∏—Ç–µ \"–ì–æ—Ç–æ–≤\" –∏–ª–∏ \"–ù–µ—Ç\".")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
